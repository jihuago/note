package controllers

// 进程、线程、协程

// 进程内存
// 进程，可执行程序运行中形成一个独立的内存体，这个内存体有自己独立的地址空间，Linux会给每个进程分配一个虚拟内存空间32操作系统为4G
// 操作系统会以进程为单位，分配系统资源（CPU时间片、内存等资源），进程是资源分配的最小单位。

// 线程内存
// 线程，有时被称为轻量级进程（LWP），是操作系统调度执行的最小单位
// 多个线程共同在一个进程上，除了拥有各自的栈空间，其他的内存空间都是一起共享。
// 所以由于这个特性，使得线程之间的内存关联性很大，互相通信就很简单（堆区、全局区等数据都共享，需要加锁机制即可完成同步通信）
// 但是同时让线程之间联系较大，比如一个线程出问题，到底就是进程问题，也就导致了其他线程问题。

// 执行单元
// 对于Linux来说，不区分进程还是线程，他们都是一个单独的执行单元，CPU一视同仁，均分配时间片
// 所以，如果一个进程想更大程度的与其他进程抢占CPU资源，那么多开线程是一个好的办法。

// 切换问题与协程
// 线程越多，进程利用或抢占的CPU资源就越高
// 线程不能无限制的多，因为CPU在内核切换一个执行单元时，会有一个时间成本和性能开销
// 综上，不能大量的开辟，因为线程执行流程越多，CPU在切换的时间成本越大。解决办法：既然不能左右和优化CPU切换线程的开销，
// 那么，我们让CPU内核态不切换执行单元，而是在用户态切换执行流程。
